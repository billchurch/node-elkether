{"name":"Node-elkether","tagline":"A project to create a node-js version of the Elk M1EXP Ethernet Expander","body":"## Welcome\r\nThis project is an attempt to create a node.js application which emulates the functionality of the [Elk M1EXP Ethernet Expander](http://www.elkproducts.com/product-catalog/elk-m1xep-m1-ethernet-interface) for the Elk M1 series of alarm panels. \r\n![No Elk M1EXP](http:///billchurch.github.io/images/M1XEP.png)\r\n\r\n## Why?\r\nWell, for one the M1EXP is pretty long in the tooth. It's also fairly expensive for what it is. Devices for a fraction of the cost can do what it does, and more which is my main purpose for replacing it.\r\n\r\n![M1EXP Port Scan](http://billchurch.github.io/images/m1expscan.png)\r\nAnother example, what the hell is tcp/26? Is it really rsftp? What's that thing doing? And tcp/21, come on... I also hate how easily identifiable it is... But hey, I'm getting ready to put some web services and all on it so, you know, I guess I can't really comment on that too much. In any case, I want more control and maybe you do too.\r\n\r\nThere is one caveat to all of this, if you're concerned about UL certification know that using something other than the Elk M1EXP will likely invalidate any UL certifications so you are doing this at your own risks and understand there is a potential for property damage or loss of life. This project is not meant to be a turn-key solution and any support is considered best-effor at the most. It's also worth mentioning that UL Certification includes almost every aspect of the alarm panel, including the actual enclosure you're using. Most people use larger and upgraded enclosures which also invalidate the UL Certification. Just something to think about when insurance claims come up and the like...\r\n\r\n## Goals\r\n\r\n### Short Term\r\n* Emulate \"Non-Secure Port\" functionality (tcp/2101)\r\n* Emulate \"Secure Port\" functionality (tcp/2601) tls1\r\n* Emulate web access\r\n** instead of a Java application use standards based HTML over HTTPS.\r\n* Capable of running on a Raspberry Pi or equivalent (any model)\r\n\r\n### Long Term\r\n* Extend to provide a simple REST API interface\r\n* Configurable ciphers\r\n* Enhanced access control lists\r\n* Client Certificate Authentication (why not)\r\n\r\n## Project Status\r\nIf you're reading this, I just set the site up, nothing's been done except for experimenting with \"socat\".\r\n\r\n## General Architecture\r\nIntended to run on a small, lower power device like a Raspberry Pi. At this point the overall software architecture will consist of some web services and a web socket which interfaces the actual serial port. All communications from clients will ultimately converge on the web socket with the intent that this will help multiplex the serial port communication to multiple listeners, transmitters, subscribers, what have you. This is considered to be a bus topology everyone hears and sees everything. \r\n\r\nThere are certain events, as when [ElkRP2](http://www.elkproducts.com/product-catalog/elkrp2-remote-programming-software) connects to program the panel, which must allow for a dedicated session. We'll want to figure out the best way to handle these lock events and ensure compatibility with ElkRP2.\r\n\r\n### Software Stack\r\nMirroring the @lowpowerlab's approach to his Home Automation Gateway\r\n* nginx 1.8\r\n* Node.js\r\n** Socket.IO\r\n** node-serialport\r\n* php? Maybe, not sure yet. I don't think we'll need it but it'll be there just in case\r\n* some yet to be determined framework to make things pretty (low priority)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}